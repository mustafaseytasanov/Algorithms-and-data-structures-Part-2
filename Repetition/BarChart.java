import java.io.*;
import java.util.*;

/*
Вовочка ломает систему безопасности Пентагона. Для этого ему понадобилось узнать, какие символы 
в секретных зашифрованных посланиях употребляются чаще других. Для удобства изучения Вовочка 
хочет получить графическое представление встречаемости символов. Поэтому он хочет построить 
гистограмму количества символов в сообщении. Гистограмма — это график, в котором каждому символу, 
встречающемуся в сообщении хотя бы один раз, соответствует столбик, высота которого пропорциональна 
количеству этих символов в сообщении.

Формат ввода
Входной файл содержит зашифрованный текст сообщения. Он содержит строчные и прописные латинские 
буквы, цифры, знаки препинания («.», «!», «?», «:», «-», «,», «;», «(», «)»), пробелы и переводы 
строк. Размер входного файла не превышает 10000 байт. Текст содержит хотя бы один непробельный символ. 
Все строки входного файла не длиннее 200 символов.Для каждого символа c кроме пробелов и переводов 
строк выведите столбик из символов «#», количество которых должно быть равно количеству символов c 
в данном тексте. Под каждым столбиком напишите символ, соответствующий ему. Отформатируйте гистограмму 
так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец были непустыми. 
Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.

Формат вывода
Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество 
которых должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, 
соответствующий ему. Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, 
первая строка и первый столбец были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики 
в порядке увеличения кодов символов.
*/


public class BarChart {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader("input.txt"));
        FileWriter writer = new FileWriter("output.txt");
        Map<Character, Integer> map = new HashMap<>();
        char letter;
        Integer amount;
        String word = reader.readLine();
        int maxHeight = 0;
        while (word != null) {
            for (int i = 0; i < word.length(); i++) {
                letter = word.charAt((int) i);
                if (letter != ' ') {
                    amount = map.get(letter);
                    if (amount == null) {
                        amount = 0;
                    }
                    amount += 1;
                    map.put(letter, amount);
                    maxHeight = Math.max(maxHeight, amount);
                }
            }
            word = reader.readLine();
        }
        Set<Character> set = map.keySet();
        char[] letters = new char[set.size()];
        int idx = 0;
        for (char ch: set) {
            letters[idx++] = ch;
        }
        Arrays.sort(letters);
        char[][] matrix = new char[maxHeight][set.size()];
        int amount2;
        for (int i = 0; i < letters.length; i++) {
            amount2 = map.get(letters[i]);
            for (int j = 0; j < amount2; j++) {
                matrix[maxHeight - 1 - j][i] = '#';
            }
        }
        for (char[] arr: matrix) {

            for (int i = 0; i < arr.length; i++) {
                if (arr[i] == '#') {
                    writer.write('#');
                } else {
                    writer.write(' ');
                }
            }
            writer.write("\n");
        }
        for (char ch: letters) {
            writer.write(ch + "");
        }
        writer.flush();
    }
}
